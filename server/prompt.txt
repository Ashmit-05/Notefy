Puzzle Coding question

1. Longest Consecutive 1s

Description:

Given a binary string, ind the length of the longest consecutive sequence of 1s.

Hint:

Iterate through the string and keep track of the current consecutive count of 1s and the maximum count
seen so far.

Constraints:

The input string consists only of '0' and '1' characters.

Input/Output:

Input: str = "0011100011"

Output: 3

Explanation: The longest consecutive sequence of 1s is "111", which has a length of 3.

2. Power of Two

Description:

Write a function that determines if a given integer is a power of two.

Hint:

A number is a power of two if it has only one bit set in its binary representation.

Constraints:

The input integer can be positive or negative.

Input/Output:

Input: n = 16

Output: true

Explanation: 16 is a power of 2 (2^4).

Input: n = -8

Output: false

Explanation: -8 is not a power of 2.

3. Longest Substring Without Repeating Characters

Description:

Given a string, ind the length of the longest substring without repeating characters.

Hint:

Use a sliding window approach and keep track of the characters in the current window using a frequency
array or hash table.

Constraints:

The input string consists only of lowercase English letters.

Input/Output:

Input: str = "abcabcbb"

Output: 3

Explanation: The longest substring without repeating characters is "abc", which has a length of 3.

4. Validate IP Address

Description:

Write a function that validates if a given string is a valid IPv4 or IPv6 address.

Hint:

Validate IPv4 and IPv6 addresses separately by checking the format and value ranges.

Constraints:

The input string consists only of digits and periods (for IPv4) or digits and colons (for IPv6).

Input/Output:

Input: ip = "192.168.1.1"

Output: true

Explanation: This is a valid IPv4 address.

Input: ip = "2001:0db8:85a3:0000:0000:8a2e:0370:7334"

Output: true

Explanation: This is a valid IPv6 address.

Input: ip = "256.256.256.256"

Output: false

Explanation: This is not a valid IPv4 address.

5. Decode String

Description:

Given an encoded string, return its decoded string. The encoding rule is: k[encoded_string], where the
encoded_string inside the square brackets is being repeated exactly k times.

Hint:

Use a stack to keep track of the current multiplier and the starting index of the encoded substring.

Constraints:

The input string is guaranteed to be valid and well-formed.

Input/Output:

Input: s = "3[a2[c]]"

Output: "accaccacc"

Explanation: The decoded string is "accaccacc".

Input: s = "2[abc]3[cd]ef"

Output: "abcabccdcdcdef"

Explanation: The decoded string is "abcabccdcdcdef".

